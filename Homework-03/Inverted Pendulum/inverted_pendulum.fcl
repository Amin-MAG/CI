FUNCTION_BLOCK Inverted_Pendulum

    VAR_INPUT
        theta : REAL;
        theta_dot : REAL;
        x_dot : REAL;
    END_VAR


    VAR_OUTPUT
        f : REAL;
    END_VAR


    FUZZIFY theta
        TERM vRight := (0, 1) (90, 0);
        TERM right := (145,0) (162,1) (180,0);
        TERM center := (170,0) (180,1) (190,0);
        TERM left := (180,0) (196,1) (215,0);
        TERM vLeft := (270, 0) (360, 1);
    END_FUZZIFY



    FUZZIFY theta_dot
        TERM vvClockwise := (-8,1) (-3,0);
        TERM vClockwise := (-6,0) (-3,1) (-1,0);
        TERM clockwise := (-4,0) (-1,1) (-0.1,0);
        TERM stop := (-0.49,0) (0,1) (0.51,0);
        TERM counterclockwise := (0.1,0) (1,1) (4,0);
        TERM vCounterclockwise := (1,0) (3,1) (6,0);
        TERM vvCounterclockwise := (3,0) (8,1);
    END_FUZZIFY



    DEFUZZIFY f
        TERM vvvGoRight := (60,0) (100,1);
        TERM vvGoRight := (50,0) (70,1) (80,0);
        TERM vGoRight := (20,0) (50,1) (60,0);
        TERM goRight := (5,0) (20,1) (50,0);
        TERM lGoRight := (0,0) (10,1) (20,0);
        TERM stop := (-0.4,0) (0,1) (0.4,0);
        TERM lGoLeft := (-20,0) (-11,1) (0,0);
        TERM goLeft := (-50,0) (-20,1) (-5,0);
        TERM vGoLeft := (-60,0) (-50,1) (-20,0);
        TERM vvGoLeft := (-80,0) (-71,1) (-50,0);
        TERM vvvGoLeft := (-100,1) (-60,0);
        ACCU : MAX;
        METHOD : COG;
        DEFAULT := 0;
    END_DEFUZZIFY



    RULEBLOCK Inverted_Pendulum
        AND : AlgebraicProduct;
        OR : MAX;
        RULE 1 : IF theta IS vRight AND theta_dot IS clockwise THEN f IS goRight;
        RULE 2 : IF theta IS vRight AND theta_dot IS vClockwise THEN f IS goRight;
        RULE 3 : IF theta IS right THEN f IS goRight;
        RULE 4 : IF theta IS left THEN f IS goLeft;
        RULE 5 : IF theta IS vLeft AND theta_dot IS vCounterclockwise THEN f IS goLeft;
        RULE 6 : IF theta IS vLeft AND theta_dot IS counterclockwise THEN f IS goLeft;
        RULE 7 : IF theta IS center AND theta_dot IS counterclockwise THEN f IS lGoLeft;
        RULE 8 : IF theta IS center AND theta_dot IS vCounterclockwise THEN f IS vGoLeft;
        RULE 9 : IF theta IS center AND theta_dot IS vvCounterclockwise THEN f IS vGoLeft;
        RULE 10 : IF theta IS center AND theta_dot IS clockwise THEN f IS lGoRight;
        RULE 11 : IF theta IS center AND theta_dot IS vClockwise THEN f IS vGoRight;
        RULE 12 : IF theta IS center AND theta_dot IS vvClockwise THEN f IS vvGoRight;
    END_RULEBLOCK

END_FUNCTION_BLOCK
